`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 20.02.2025 22:40:44
// Design Name: 
// Module Name: Single_Cycle
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module Program_Counter(input clk,reset,input [31:0]PC_in, output reg [31:0] PC_out

    );
    always @(posedge clk , posedge reset)
    begin
    if (reset)
    PC_out <= 32'b00;
    else 
    PC_out <= PC_in;
    
    
    
    end
    
    
endmodule

module PCplus4(input [31:0] fromPC, output [31:0] NextoPC);
assign NextoPC = fromPC +4;
endmodule

module Instruction_Mem(input clk, reset, input [31:0] read_address, output [31:0] instruction_out);
reg [31:0] I_Mem[63:0];
integer k;
assign instruction_out = I_Mem[read_address >>2 ];
always@(posedge clk , posedge reset)begin
    if (reset)begin
        for( k=0; k< 64; k=k+1) begin
        I_Mem[k] <= 32'b00;
    end
end
else begin 
    
       I_Mem[0]  = 32'b00000000000000000000000000000000; // nop
        I_Mem[1]  = 32'b00000001100110001101101100110011; 
        I_Mem[2]  = 32'b0100000_00110_01001_000_01010_0110011; //6,9,10
        I_Mem[3] = 32'b00000000001100010111100110110011; 
        I_Mem[4] = 32'b00000000010100110011000110110011; 
        I_Mem[5] = 32'b00000000101110101100010100010011; 
        I_Mem[6] = 32'b00000000000101001010010010010011; 
        I_Mem[7] = 32'b00000000111101011000000000100011; 
        I_Mem[8] = 32'b00000000011100011000001000000011; 
        I_Mem[9] = 32'b00000000111101111000001000100011; 
        I_Mem[10] = 32'b00000000011101110000001000000011;
        I_Mem[11] = 32'h00948663; 
        I_Mem[12] = 32'b01000000011001001000001010110011; 
        I_Mem[13] = 32'b01000000001000100000001111110011; 
        I_Mem[14] = 32'b01000000001100111000010100110011; 
        I_Mem[15] = 32'b01000000000100101111111110110011; 
        
end


end
endmodule

module Reg_File(
    input clk, reset, RegWrite,
    input [4:0] Rs1, Rs2, Rd,
    input [31:0] Write_data,
    output [31:0] read_data1, read_data2
);

reg [31:0] Registers[31:0]; // 32 Registers
integer k;

// Initialize specific values at reset
always @(posedge clk or posedge reset) begin
    if (reset) begin
        Registers[0]  <= 32'd0;   // x0 is always zero
        Registers[1]  <= 32'd10;  // Example initialization values
        Registers[2]  <= 32'd20;
        Registers[3]  <= 32'd30;
        Registers[4]  <= 32'd40;
        Registers[5]  <= 32'd50;
        Registers[6]  <= 32'd60;
        Registers[7]  <= 32'd70;
        Registers[8]  <= 32'd80;
        Registers[9]  <= 32'd90;
        Registers[10] <= 32'd100; // Customize as needed
        for (k = 11; k < 32; k = k + 1) 
            Registers[k] <= k * 10; // Example pattern: R[k] = k * 10
    end 
    else if (RegWrite && Rd != 0) begin
        Registers[Rd] <= Write_data; // Only write if RegWrite is 1 and Rd is not x0
        $display("Writing %d to Register %d", Write_data, Rd); // Debug message
    end
end

assign read_data1 = Registers[Rs1];
assign read_data2 = Registers[Rs2];

endmodule
module ImmGen(input [31:0]instruction ,input [6:0] Opcode, output reg [31:0]ImmExt );
always @(*)begin
    case (Opcode)
    7'b0000011 :  ImmExt = {{ 20{instruction[31]}}, instruction[31:20]};
    7'b0100011 : ImmExt = {{20{instruction[31]}}, instruction[31:25], instruction[11:7]};  // S-type
    7'b1100011 : ImmExt = {{19{instruction[31]}}, instruction[31], instruction[30:25], instruction[11:8], 1'b0}; // B-type
    
    endcase
    
end

endmodule

// In Control_Unit's port list, add MemRead.
module Control_Unit(
    input [6:0] instruction,
    output reg Branch, MemtoReg, MemWrite, ALUSrc, RegWrite, MemRead,
    output reg [1:0] ALUOp
);
    always @(*) begin
        case (instruction)
            7'b0110011: {ALUSrc, MemtoReg, RegWrite, MemWrite, Branch, MemRead, ALUOp} = 8'b0_0_1_0_0_0_10; // R-type
            7'b0000011: {ALUSrc, MemtoReg, RegWrite, MemWrite, Branch, MemRead, ALUOp} = 8'b1_1_1_0_0_1_00; // Load (I-type): MemRead = 1
            7'b0100011: {ALUSrc, MemtoReg, RegWrite, MemWrite, Branch, MemRead, ALUOp} = 8'b1_0_0_1_0_0_00; // Store (S-type)
            7'b1100011: {ALUSrc, MemtoReg, RegWrite, MemWrite, Branch, MemRead, ALUOp} = 8'b0_0_0_0_1_0_01; // Branch (B-type)
            default:    {ALUSrc, MemtoReg, RegWrite, MemWrite, Branch, MemRead, ALUOp} = 8'b0_0_0_0_0_0_00;
        endcase
    end
endmodule



module ALU_unit (input [31:0]  A,B, input [3:0] Control_in, output reg [31:0] ALU_Result, output reg zero);

always @ (Control_in or  A  or B) begin
    case (Control_in) 
    4'b0000 : begin zero <=0; ALU_Result <= A&B; end
    4'b0001 : begin zero <=0; ALU_Result <= A|B; end
    4'b0010 : begin zero <=0; ALU_Result <= A+B; end
    4'b0110 : begin if (A==B) zero <=1; ALU_Result <= A-B; end
    endcase
             
end



endmodule

module ALU_Control(input [1:0] ALUOp,input fun7, input [2:0] fun3, output reg [3:0] Control_out);

always @(*) begin
    case ({ALUOp,fun7, fun3})
    6'b00_0000 : Control_out <= 4'b0010;//lw/sw add
    6'b01_0000 : Control_out <= 4'b0110;// beq subtract
    6'b10_0000 : Control_out <= 4'b0010;// R-type add
    6'b10_1000 : Control_out <= 4'b0110; // R- type subtract
    6'b10_0111 : Control_out <= 4'b0000; // and
    6'b10_0110 : Control_out <= 4'b0001;//or
    endcase
end


endmodule

module Data_Memory(
    input clk, reset, MemWrite, MemRead, 
    input [31:0] read_address, Write_data, 
    output reg [31:0] Memdata_out // Changed to reg
);

reg [31:0] D_Memory[63:0]; // 64x32-bit memory
integer k;

always @(posedge clk or posedge reset) begin
 if (MemWrite) begin
        D_Memory[read_address>>2] <= Write_data; // Write data to memory
    end
end

// Read logic
always @(*) begin
    if (MemRead) 
        Memdata_out = D_Memory[read_address>>2]; // Read from memory
    else 
        Memdata_out = 32'b00; // Default output when not reading
end

endmodule

module Mux1(input sel1,input [31:0] A1,B1, output [31:0] Mux1_out) ;

assign Mux1_out = (sel1==1'b0)? A1 :B1;

endmodule

module Mux2(input sel2, input [31:0] A2, B2, output [31:0] Mux2_out) ;
assign Mux2_out = (sel2 == 1'b0)? A2 :B2;


endmodule

module Mux3(input sel3, input [31:0] A3, B3, output [31:0] Mux3_out) ;
assign Mux3_out = (sel3 == 1'b0)? A3 :B3;


endmodule


module AND_logic (input branch, zero, output and_out);

assign and_out = branch & zero;

endmodule

module Adder (input [31:0] in_1, in_2 , output [31:0] Sum_out );
assign Sum_out = in_1 + in_2;

endmodule 



module top (input clk, input reset);


    wire [31:0] PC_top,instruction_top, Rd1_top, Rd2_top, ImmExt_top,mux1_top , Sum_out_top, NextoPC_top,PC_in_top, address_top,Memdata_top,WriteBack_top;
wire RegWrite_top, ALUSrc_top,branch_top,zero_top,sel2_top, MemtoReg_top, MemWrite_top, MemRead_top;
wire [1:0] ALUOp_top;
wire [3:0]control_top;
Program_Counter PC(.clk(clk), .reset(reset) , .PC_in(PC_in_top), .PC_out(PC_top));

PCplus4 PC_Adder(.fromPC(PC_top), .NextoPC( NextoPC_top));

Instruction_Mem Inst_Memory (.clk(clk), .reset(reset), .read_address(PC_top),.instruction_out(instruction_top));

Reg_File Reg_File(.clk(clk), .reset(reset), .RegWrite(RegWrite_top), .Rs1(instruction_top[19:15]), .Rs2(instruction_top[24:20]),.Rd(instruction_top[11:7]),.Write_data(WriteBack_top) ,.read_data1(Rd1_top),.read_data2(Rd2_top)); 

ImmGen ImmGen(.Opcode(instruction_top[6:0]), .instruction(instruction_top[31:0]), .ImmExt(ImmExt_top));

Control_Unit Control_Unit (.instruction(instruction_top[6:0]),.Branch(branch_top),.MemtoReg(MemtoReg_top),.MemRead(MemRead_top),.ALUOp(ALUOp_top),.MemWrite(MemWrite_top), .ALUSrc(ALUSrc_top),.RegWrite(RegWrite_top));


ALU_Control ALU_Control(.ALUOp(ALUOp_top), .fun7(instruction_top[30]), .fun3(instruction_top[14:12]), .Control_out(control_top));
ALU_unit ALU(.A(Rd1_top),.B(mux1_top),.Control_in(control_top),.ALU_Result(address_top),.zero(zero_top));

Mux1 ALU_mux(.sel1(ALUSrc_top), .A1(Rd2_top), .B1(ImmExt_top), .Mux1_out(mux1_top));

Adder add(.in_1(PC_top),.in_2(ImmExt_top),.Sum_out(Sum_out_top));
AND_logic AND(.branch(branch_top),.zero(zero_top),.and_out(sel2_top));

Mux2 ADD(.sel2(sel2_top),.A2( NextoPC_top), .B2(Sum_out_top),.Mux2_out(PC_in_top)); 

Data_Memory Data_mem(.clk(clk), .reset(reset), .MemWrite(MemWrite_top), .MemRead(MemRead_top),.read_address(address_top), .Write_data(Rd2_top), .Memdata_out(Memdata_top)); 

Mux3 Memory_mux(
    .sel3(MemtoReg_top), 
    .A3(address_top),  // ALU result
    .B3(Memdata_top),  // Memory data
    .Mux3_out(WriteBack_top)
);

endmodule

module tb_top();

reg clk, reset;
top uut(.clk(clk),.reset(reset));

initial begin
clk = 0;
reset = 1;
#5
reset = 0;
#400;
end

always begin
#5 clk = ~clk;  
end


endmodule
